

    ***************************************************************
    **                                                           **
    **                00_react_tutorial_manual                   **
    **                                                           **
    ***************************************************************
- 00_react_tutorial_manual
    - TITULO: Reactjs siguiendo el manual
    - REFERENCIAS
        - https://es.reactjs.org/docs/getting-started.html

    - AGREGAR REACT A UN SITIO WEB

        - En la página html crear una etiqueta <div id="xxxx"> vacía.

        - Agregar 3 etiquetas <script> antes de </body>

            -   <!-- Cargar React. -->
                <!-- Nota: cuando se despliegue, reemplazar "development.js" con "production.min.js". -->
                <script src="https://unpkg.com/react@16/umd/react.development.js" crossorigin></script>
                <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js" crossorigin></script>
                <!-- Cargamos nuestro componente de React. -->
                <script src="./src/components/like_button.js"></script>

        - Crear el Componente de React
            - like_button.js

        - Reusar un componente
        	- Puede colocar la etiqueta div donde lo requiera y reusar el componente.

        - Consejo: Compactar JavaScript para producción

            <script src="https://unpkg.com/react@16/umd/react.production.min.js" crossorigin></script>
            <script src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js" crossorigin></script>

        - Opcional: Prueba React con JSX
        	- Agregar un transpilador a la página.
        		- <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>

        		- Para pruebas: https://babeljs.io/en/repl#?browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=FAAhB4CMFcBdYPYDsTIMIBsCWBjA1gLwDeAFAJQgEB8IsAFlgM4B0jAprAMqwCGsbJIiGx42AEwBctAE7Q2IAL5kFVUGBAAZLKLXgA9DHjJVQA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=es2015%2Creact%2Cstage-2&prettier=false&targets=&version=7.4.3&externalPlugins=
        		
        		- Ahora puedes usar JSX en cualquier etiqueta de <script> al agregarle el atributo type="text/babel".

        - Agregar JSX a un proyecto
            - npm init -y
            - npm install babel-cli babel-preset-react-app
            - Ejecuta el preprocesador de JSX
                - Crear carpeta src
                - npx babel --watch src --out-dir . --presets react-app/prod

    - CREAR UNA NUEVA APLICACIÓN REACT 
        - Para obtener la mejor experiencia de usuario y desarrollador use una cadena de herramientas integrada. Que permiten:
            - Escalar a múltiples archivos y componentes.
            - Usar bibliotecas de terceros desde npm.
            - Detección temprana de errores comunes.
            - Edición en vivo de CSS y JS en desarrollo.
            - Optimización de la salida para producción.

        - Cadena de herramientas recomendadas
            - Si estas aprendiendo : usa Create React App.
            - Si estas creando una nueva aplicación de página única: Usa Create React App.
            - Si estás construyendo un sito web renderizado en servidor con Node.js, prueba Next.js.
            - Si estás construyendo un sitio web orientado a contenido estático, prueba Gatsby.
            - Si estás construyendo una biblioteca de componentes o integrando una base de código existente, prueba Cadenas de Herramientas más Flexibles.

            - Create React App
                - Es una buena opción para construir una nueva aplicación DE PÁGINA ÚNICA.
                    - Cuando estés listo para desplegar a producción, ejecuta npm run build lo
                      cual crea una compilación optimizada de tu aplicación en el directorio build

            - Next.js
                - Es un framework popular y ligero para aplicaciones estáticas y renderizadas en
                  servidor construidas con React. Integra soluciones de estilo y enrutamiento y
                  asume que estás usando Node.js como ambiente de servidor.
                - Referencia
                    - https://nextjs.org/

            - Gatsby
                - Es la mejor manera de crear sitios web estáticos usando React. Te permite usar componentes React, pero genera HTML y CSS pre-renderizado para garantizar el tiempo de carga más rápido.
                - https://www.gatsbyjs.org/

            - Cadenas de herramientas más flexibles
                - Neutrino combina el poder de webpack con la simplicidad de los presets (configuraciones preempaquetadas), e incluye presets para aplicaciones React y componentes React.
                - Parcel es un empaquetador de aplicaciones web rápido y de cero configuración que funciona con React.
                - Razzle es un framework de renderizado en servidor que no requiere ninguna configuración, pero ofrece más flexibilidad que Next.js.

            - Creando una cadena de herramientas desde cero
                - Un gestor de paquetes como Yarn o npm. Este te permite aprovechar el vasto ecosistema de paquetes de terceros, e instalarlos o actualizarlos de una manera fácil.
                - Un empaquetador como webpack o Parcel. Este te permite escribir código modular y empaquetarlo junto en paquetes más pequeños que optimizan el tiempo de carga.
                - Un compilador como Babel. Este te permite escribir Javascript moderno que aún así funciona en navegadores más antiguos


            - Enlaces CDN
                - Tanto React como React-Dom tienen CND definidos
                    - Desarrollo
                        <script crossorigin src="https://unpkg.com/react@16/umd/react.development.js"></script>
                        <script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>

                    - Producción
                        <script crossorigin src="https://unpkg.com/react@16/umd/react.production.min.js"></script>
                        <script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"></script>

                    - Para usar una versión específica cambiar el número 16 por el que corresponda.

                

                    - ¿Por qué el atributo crossorigin?
                    - Si utilizas React desde un CDN, nosotros recomendamos mantener el atributo crossorigin puesto:
                        <script crossorigin src="..."></script>

                    - También recomendamos verificar que el CDN que estás utilizando establece el encabezado HTTP Access-Control-Allow-Origin: *
                        - Referencia
                            - https://www.youtube.com/watch?v=ue6oEH_NeNY
                            - https://developer.mozilla.org/es/docs/Web/HTTP/Headers/Access-Control-Allow-Origin
                
                - Canales de lanzamiento (Release Channels)
                    - Latest: es para versión ESTABLE de React, es la que se usa con npm. Es la que se recomienda
                    - Next: Equivaldría a una Release Candidate RC
                    - Experimental: 


    - COMCEPTOS PRINCIPALES
        - Presentando JSX
            - const element = <h1>Hello, world!</h1>;

            - Recomendamos usarlo con React
            - JSX produce elementos de React
            - La lógica de renderizado está unida a la lógica de la interfaz de usaurio.
                - Cómo se manejan los eventos
                - Cómo cambia el estado con el tiempo
                - cómo se preparan los datos para su visualización.

            - React lugar de separar artificialmente las tecnologías poniendo por separado el maquetado y la lógica. React SEPARA INTERESES, con unidades ligeramente acopladas llamadas "COMPONENTES." que contiene ambas.

        - Insertando expresiones en JSX
            - Especificando atributos con JSX
                - Puedes utilizar comillas para especificar strings literales como atributos:
                    - const element = <div tabIndex="0"></div>;

                - También puedes usar llaves para insertar una expresión JavaScript en un atributo:
                    - const element = <img src={user.avatarUrl}></img>;

                - Dado que JSX es más cercano a JavaScript que a HTML, React DOM usa la convención de nomenclatura camelCase en vez de nombres de atributos HTML.
                Por ejemplo, class se vuelve className en JSX, y tabindex se vuelve tabIndex.

            - Especificando hijos con JSX
                - Etiqueta vacía usar: />
                - Para más de un elemento, encerrarlos en un contenedor <div>

                    const element = (
                        <div>
                            <h1>
                            <h2>

                        </div>

                    );

            - JSX previene ataques de inyección

                - Por defecto, React DOM escapa cualquier valor insertado en JSX antes de renderizarlo
                - Todo es convertido en un string antes de ser renderizado
                - Esto ayuda a prevenir vulnerabilidades XSS (cross-site-scripting)

                    const title = response.potentiallyMaliciousInput;
                    // Esto es seguro:
                    const element = <h1>{title}</h1>;

            - JSX representa objetos
                - Babel compila JSX a llamadas de React.createElement()

        - RENDERIZADO DE ELEMENTOS
            - Nodo Raiz: <div id="root"></div>
                - Todo lo que está dentro será renderizado por ReactDOM

            - Actualizando el elemento renderizado
                - Los elementos de React son inmutables. Una vez creas un elemento, no puedes cambiar sus hijos o atributos.
                - En la práctica, la mayoría de las aplicaciones de React solo llaman a ReactDOM.render() una vez. En las siguientes secciones aprenderemos cómo el código se puede encapsular en componentes con estado.

            - React solo actualiza lo que es necesario
                - React DOM compara el elemento y su hijos con el elemento anterior, y solo aplica las actualizaciones del DOM que son necesarias para que el DOM esté en el estado deseado
                - Puedes verificarlo con un reloj, ejemmplor root_06
                   











